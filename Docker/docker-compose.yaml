version: "3.3"

services:
  traefik:
    container_name: traefik
    image: traefik:latest
    restart: always
    env_file:
      - .env.production
    ports:
      - "80:80" # <== http
      - "443:443" # <== https
    command:
      #### These are the CLI commands that will configure Traefik and tell it how to work! ####
      ## API Settings - https://docs.traefik.io/operations/api/, endpoints - https://docs.traefik.io/operations/api/#endpoints ##
      - --api=true
      - --ping=true
      - --ping.entryPoint=web
      - --ping.manualrouting=true
      - --api.insecure=false # <== Enabling insecure api, NOT RECOMMENDED FOR PRODUCTION
      - --api.dashboard=true # <== Enabling the dashboard to view services, middlewares, routers, etc...
      - --api.debug=false # <== Enabling additional endpoints for debugging and profiling
      - --log.format=json
      ## Log Settings (options: ERROR, DEBUG, PANIC, FATAL, WARN, INFO) - https://docs.traefik.io/observability/logs/ ##
      - --log.level=INFO # <== Setting the level of the logs from traefik
      ## Provider Settings - https://docs.traefik.io/providers/docker/#provider-configuration ##
      - --providers.docker=true # <== Enabling docker as the provider for traefik
      - --providers.docker.exposedbydefault=false # <== Don't expose every container to traefik, only expose enabled ones
      - --providers.file.filename=/traefik-app/config/traefik-dynamic.yaml # <== Referring to a dynamic configuration file
      - --providers.docker.network=yellyoshua_web # <== Operate on the docker network named web
      ## Entrypoints Settings - https://docs.traefik.io/routing/entrypoints/#configuration ##
      - --entrypoints.web.address=:80 # <== Defining an entrypoint for port :80 named web
      - --entrypoints.web-secured.address=:443 # <== Defining an entrypoint for https on port :443 named web-secured
      ## Certificate Settings (Let's Encrypt) -  https://docs.traefik.io/https/acme/#configuration-examples ##
      - --certificatesresolvers.mytlschallenge.acme.tlschallenge=true # <== Enable TLS-ALPN-01 to generate and renew ACME certs
      - --certificatesresolvers.mytlschallenge.acme.email=${EMAIL} # <== Setting email for certs
      - --certificatesresolvers.mytlschallenge.acme.storage=/traefik-app/letsencrypt/acme.json # <== Defining acme file to store cert information
      # - --certificatesresolvers.mytlschallenge.acme.dnschallenge=duckdns
      - --entrypoints.web-secured.http.tls=true # Default TLS configuration for the routers linked to the entry point. (Default: false)
      - --entrypoints.web-secured.http.tls.certresolver=mytlschallenge
      - --entrypoints.web-secured.http.tls.domains[0].main=${TLS_DOMAIN}
      - --entrypoints.web-secured.http.tls.domains[0].sans=monitor.${TLS_DOMAIN},tv.${TLS_DOMAIN},status.${TLS_DOMAIN}
      # - --entrypoints.web-secured.http.tls.domains=${TLS_DOMAIN},*${TLS_DOMAIN}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./content/traefik-app/config:/traefik-app/config
      - ./content/traefik-app/letsencrypt:/traefik-app/letsencrypt
    networks:
      - web
    labels:
      #### Labels define the behavior and rules of the traefik proxy for this container ####
      - "traefik.enable=true" # <== Enable traefik on itself to view dashboard and assign subdomain to view it
      - "traefik.http.routers.api.rule=Host(`monitor.${TLS_DOMAIN}`)" # <== Setting the domain for the dashboard
      - "traefik.http.routers.api.entrypoints=web" # <== Defining the entrypoint for http, **ref: line 30
      - "traefik.http.routers.api.service=api@internal" # <== Enabling the api to be a service to access
      - "traefik.http.middlewares.redirect-https.redirectscheme.scheme=https" # <== This is a middleware scheme to https
      - "traefik.http.middlewares.redirect-https.redirectscheme.permanent=true" # <== This is a middleware to permanent redirect
      - "traefik.http.routers.api.middlewares=redirect-https@docker" # <== This is a middleware to redirect to https
      # - 'traefik.http.routers.api.middlewares=redirect@file' # <== This is a middleware to redirect to https
      - "traefik.http.routers.api-secured.rule=Host(`monitor.${TLS_DOMAIN}`)" # <== Your Domain Name for the https rule
      - "traefik.http.routers.api-secured.entrypoints=web-secured" # <== Defining entrypoint for https, **ref: line 31
      # - "traefik.http.routers.api-secured.tls.certresolver=mytlschallenge" # <== Defining certsresolvers for https
      - "traefik.http.routers.api-secured.service=api@internal" # <== Enabling the api to be a service to access

      #### Labels define the behavior and rules of the traefik proxy for this container ####
      - "traefik.http.routers.ping-path.rule=Host(`status.${TLS_DOMAIN}`)" # <== Setting the domain for the dashboard
      - "traefik.http.routers.ping-path.entrypoints=web" # <== Defining the entrypoint for http, **ref: line 30
      - "traefik.http.routers.ping-path.service=ping@internal" # <== Enabling the api to be a service to access
      - "traefik.http.routers.ping-path.middlewares=redirect-https@docker" # <== This is a middleware to redirect to https
      # - 'traefik.http.routers.ping-path.middlewares=redirect@file' # <== This is a middleware to redirect to https
      - "traefik.http.routers.ping-path-secured.rule=Host(`status.${TLS_DOMAIN}`)" # <== Your Domain Name for the https rule
      - "traefik.http.routers.ping-path-secured.entrypoints=web-secured" # <== Defining entrypoint for https, **ref: line 31
      # - "traefik.http.routers.ping-path-secured.tls.certresolver=mytlschallenge" # <== Defining certsresolvers for https
      - "traefik.http.routers.ping-path-secured.service=ping@internal" # <== Enabling the api to be a service to access


networks:
  web:
    driver: bridge
    driver_opts:
      parent: eth0
    ipam:
      config:
        - subnet: "192.168.0.0/24"
